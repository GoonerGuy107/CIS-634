
---------------------------------------------------------------------
       HOL-4 [Kananaskis 11 (stdknl, built Sat Aug 19 09:30:06 2017)]

       For introductory HOL help, type: help "hol";
       To exit type <Control>-D
---------------------------------------------------------------------
> > > > val funA1 = (fn x => (fn y => (fn z => x + y + x)));
val funA1 = fn: int -> int -> 'a -> int
> val funA1 = (fn x => (fn y => (fn z => x + y + x)1)2)3;
val funA1 = 8: int
> val funA1 = (fn x => (fn y => (fn z => x + y + x)4)5)6;
val funA1 = 17: int
> val funA1 = (fn x => (fn y => (fn z => x + y + x)7)8)9;
val funA1 = 26: int
> fun funA2 (x,y,z) = x + y + z;
val funA2 = fn: int * int * int -> int
> funA2 (1,2,3);
val it = 6: int
> funA2 (4,5,6);
val it = 15: int
> funA3 (7,8,9);
poly: : error: Value or constructor (funA3) has not been declared Found near funA3 (7, 8, 9)
Static Errors
> funA2 (7,8,9);
val it = 24: int
> val funB1 = (fn x => (fn y => x < y));
val funB1 = fn: int -> int -> bool
> val funB1 = (fn x => (fn y => x < y)0)0;
val funB1 = false: bool
> val funB1 = (fn x => (fn y => x < y)1)2;
val funB1 = false: bool
> val funB1 = (fn x => (fn y => x < y)4)3;
val funB1 = true: bool
> fun funB2 (x,y) = x < y;
val funB2 = fn: int * int -> bool
> funB2 (0,0);
val it = false: bool
> funB2 (1,2);
val it = true: bool
> funB2 (4,3);
val it = false: bool
> val funC1 = (fn s1 => (fn s2 => s1 ^ s2));
val funC1 = fn: string -> string -> string
> val funC1 = (fn s1 => (fn s2 => s1 ^ s2)"hi")"there!";
val funC1 = "there!hi": string
> val funC1 = (fn s1 => (fn s2 => s1 ^ s2)"Oh")"no!";
val funC1 = "no!Oh": string
> val funC1 = (fn s1 => (fn s2 => s1 ^ s2)"What")"the...";
val funC1 = "the...What": string
> fun funC2 (s1, s2) = s1 ^ s2;
val funC2 = fn: string * string -> string
> funC2 ("Hi","there!");
val it = "Hithere!": string
> funC2 ("Oh", "no!");
val it = "Ohno!": string
> func2 ("What", "the...");
poly: : error: Value or constructor (func2) has not been declared
Found near func2 ("What", "the...")
Static Errors
> funC2 ("What", "the..");
val it = "Whatthe..": string
> val funD1 = (fn list1 => (fn list2 => list1 @ list2));
val funD1 = fn: 'a list -> 'a list -> 'a list
> val funD1 = (fn list1 => (fn list2 => list1 @ list2)[0,1])[2,3,4];
val funD1 = [2, 3, 4, 0, 1]: int list
> val funD1 = (fn list1 => (fn list2 => list1 @ list2)[])[0,1];
val funD1 = [0, 1]: int list
> fun funD2 (list1, list2) = list1 @ list2;
val funD2 = fn: 'a list * 'a list -> 'a list
> funD2 ([0,1],[2,3,4]);
val it = [0, 1, 2, 3, 4]: int list
> funD2 ([],[0,1]);
val it = [0, 1]: int list
> val funE1 = (fn x => (fn y => if x > y then x else y));
val funE1 = fn: int -> int -> int
> val funE1 = (fn x => (fn y => if x > y then x else y)2)1;
val funE1 = 2: int
> val funE1 = (fn x => (fn y => if x > y then x else y)5)5;
val funE1 = 5: int
> val funE1 = (fn x => (fn y => if x > y then x else y)5)10;
val funE1 = 10: int
> fun funE2 (x,y) = if x > y then x else y;
val funE2 = fn: int * int -> int
> funE2 (2,1);
val it = 2: int
> funE2 (5,5);
val it = 5: int
> funE2 (5,10);
val it = 10: int
> 